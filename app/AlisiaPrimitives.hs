module AlisiaPrimitives where

import AlisiaBasic
import AlisiaUnary
import AlisiaStringPrim
import AlisiaOtherPrim
import AlisiaPrimHelper

primitives :: [(String, [LispVal] -> ThrowsError LispVal)]
primitives = [("+", numericBinop (+))
             ,("-", numericBinop (-))
             ,("*", numericBinop (*))
             ,("/", numericBinop div)
             ,("mod", numericBinop mod)
             ,("hasil-bagi", numericBinop quot)
             ,("sisa-bagi", numericBinop rem)
             ,("=", numBoolBinop (==))
             ,("<", numBoolBinop (<))
             ,(">", numBoolBinop (>))
             ,("/=", numBoolBinop (/=))
             ,(">=", numBoolBinop (>=))
             ,("<=", numBoolBinop (<=))
             ,("&&", boolBoolBinop (&&))
             ,("||", boolBoolBinop (||))
             ,("string=?", strBoolBinop (==))
             ,("string<?", strBoolBinop (<))
             ,("string>?", strBoolBinop (>))
             ,("string<=?", strBoolBinop (<=))
             ,("string>=?", strBoolBinop (>=))
             ,("string-ci=?", strBoolBinop (ci_help (==)))
             ,("string-ci<?", strBoolBinop (ci_help (<)))
             ,("string-ci>?", strBoolBinop (ci_help (>)))
             ,("string-ci<=?", strBoolBinop (ci_help (<=)))
             ,("string-ci>=?", strBoolBinop (ci_help (>=)))
             ,("negasi", unaryOp not')
             ,("bool?", unaryOp boolP)
             ,("lis?", unaryOp listP)
             ,("simbol?", unaryOp symbolP)
             ,("kara?", unaryOp charP)
             ,("string?", unaryOp stringP)
             ,("vektor?", unaryOp vectorP)
             ,("simbol->string", unaryOp symbol2string)
             ,("string->simbol", unaryOp string2symbol)
             ,("kepala", car)
             ,("badan", cdr)
             ,("kons", cons)
             ,("sama?", eqv)
             -- ,("eq?", eqv)
             ,("ekual?", equal)
             ,("buat-string", make_string)
             ,("string", create_string)
             ,("panjang-string", string_length)
             ,("ref-string", char_at)
             ,("substring", substring)
             ,("tambah-string", string_append)
             ]
